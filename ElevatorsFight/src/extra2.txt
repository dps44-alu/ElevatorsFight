INCLUDE "hardware.inc"

SECTION "Enemy Constants", ROM0
DEF ENEMY_MIN_X     EQU 8 ; Límite izquierdo de la pantalla
DEF ENEMY_MAX_X     EQU 152 ; Límite derecho de la pantalla
DEF ENEMY_SPEED     EQU 1 ; Velocidad de movimiento
DEF MOVE_DELAY      EQU 8 ; Se moverá cada 8 frames
DEF ENEMY_COUNT     EQU 3 ; Número de enemigos


SECTION "Enemies Atributes", WRAM0
enemyX:             ds ENEMY_COUNT ; Array de 3 bytes para la posición X
enemyY:             ds ENEMY_COUNT ; Array de 3 bytes para la posición Y
enemy_direction:    ds ENEMY_COUNT ; Array de 3 bytes para la dirección
enemy_timer:        ds ENEMY_COUNT ; Array de 3 bytes para los contadores


SECTION "Enemy", ROM0
initialize_enemy:
    ld b, ENEMY_COUNT   ; Contador de enemigos
    ld c, 0             ; Índice del enemigo

    .loop:
        xor a ; A = 0
        ld [enemy_direction + c], a ; Primero derecha
        ld [enemy_timer + c], a

        ld a, 84
        ld [enemyX + c], a ; X = 1/2 pantalla

        ld a, 40
        ld [enemyY + c], a ; Y = arriba cerca del borde
        
        inc c
        dec b
        jr nz, .loop

    call copy_enemy_tiles_to_vram
    ret


copy_enemy_tiles_to_vram:
    ; Copia los datos del tile del enemigo en la VRAM
    ld de, nave2
    ld hl, $8020
    ld bc, nave2end - nave2
    call mem_copy
    ret


copy_enemy_to_oam:
    ld b, ENEMY_COUNT ; Contador de enemigos
    ld c, 0 ; Índice del enemigo
    ld hl, _OAMRAM + 44 ; Establece la dirección base en la OAM para el primer enemigo

    .loop:
        ld a, [enemyY + c]
        ld [hl+], a
        ld a, [enemyX + c]
        ld [hl+], a
        ld a, 2 ; Tercer tile
        ld [hl+], a
        xor a ; Sin propiedades especiales
        ld [hl+], a
        inc c
        dec b
        jr nz, .loop
    ret


move_enemy:
    ld b, ENEMY_COUNT ; Contador de enemigos
    ld c, 0 ; Índice del enemigo

    .loop:
        ; Incrementa el contador
        ld a, [enemy_timer + c]
        inc a
        ld [enemy_timer + c], a
        ; Comprueba si debemos mover
        cp MOVE_DELAY
        jr nz, .next ; Si no es el momento, salta al siguiente enemigo
        ; Reinicia el contador
        xor a
        ld [enemy_timer + c], a
        ; Comprueba la dirección actual
        ld a, [enemy_direction + c]
        and a ; Compara con 0
        jr nz, .move_left

        .move_right:
            ; Mueve a la derecha
            ld a, [enemyX + c]
            cp ENEMY_MAX_X ; Compara con el límite derecho
            jr nc, .change_to_left ; Si llegamos al límite, cambia dirección
            add ENEMY_SPEED ; Suma la velocidad
            ld [enemyX + c], a
            jr .next

        .move_left:
            ; Mueve a la izquierda
            ld a, [enemyX + c]
            cp ENEMY_MIN_X ; Compara con el límite izquierdo
            jr c, .change_to_right ; Si llegamos al límite, cambia dirección
            sub ENEMY_SPEED ; Resta la velocidad
            ld [enemyX + c], a
            jr .next

        .change_to_left:
            ld a, 1
            ld [enemy_direction + c], a
            jr .next

        .change_to_right:
            xor a ; a = 0
            ld [enemy_direction + c], a

        .next:
            inc c
            dec b
            jr nz, .loop

    ret